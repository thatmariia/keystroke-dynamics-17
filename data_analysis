import numpy as np
import pandas as pd
import statsmodels.api as sm
import sqlite3
from scipy import stats
from scipy.stats import *

import json
import math

# next command ensures that plots appear inside the notebook
%matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns  # also improves the look of plots

password = 'bridport20'

class reader:
    
    def __init__ (self, name:str):
        
        self.name = name
        
        self.df = pd.read_excel('password_{}.xlsx'.format(self.name), sheet_name = 'Sheet1')
        self.df['event_number'] = self.df.index.values % (2*len(password))
        self.df['relative_time'] = [(self.df.iloc[i]['time'] - self.df.iloc[20*math.floor(i/20)]['time']) for i in range(len(self.df))]
        
    
def key_press_dis(df):
    '''Makes density plots for the relative time of each key press'''
        
    for i in password:
        plt.figure()
        mask = (df['event'] == 'KeyPress') & (df['key'] == i)
        sns.distplot(df[mask]['relative_time'], bins = 100).set_title('Key release distribution for: {}'.format(i))
    
def key_release_dis(df):
    '''Makes density plots for the relative time of each key release'''
        
    for i in password:
        plt.figure()
        mask = (df['event'] == 'KeyRelease') & (df['key'] == i)
        sns.distplot(df[mask]['relative_time'], bins = 100).set_title('Key release distribution for: {}'.format(i))
            
def key_length_dis(df):
    '''Makes density plots fot the length of each key press'''
    
    n = 0
    elapsed_times = []
    df_length = df.sort_values(by = ['key', 'time'])
    
    for i in range(1, len(df_length)//2, 2):
        elapsed_time = df_length.iloc[i]["time"] - df_length.iloc[i-1]["time"]
        elapsed_times.append(elapsed_time)
            
    for key in password:
        key_length_data = [elapsed_times[i] for i in range(len(elapsed_times)) if i%20 == n]
        
        plt.figure()
        sns.distplot(key_length_data, bins = 100).set_title('Key press length distribution for: {}'.format(key))
        
        n+=1
    
        
